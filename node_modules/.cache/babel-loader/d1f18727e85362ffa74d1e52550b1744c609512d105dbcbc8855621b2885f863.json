{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock, KeepAlive as _KeepAlive, withCtx as _withCtx, createElementVNode as _createElementVNode, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Header = _resolveComponent(\"Header\");\n  const _component_router_view = _resolveComponent(\"router-view\");\n  const _component_Footer = _resolveComponent(\"Footer\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_Header), _createElementVNode(\"div\", null, [(_openBlock(), _createBlock(_component_router_view, {\n    key: $data.componentKey,\n    onSuccess: $options.success,\n    onError: $options.error,\n    onWarning: $options.warning,\n    onForceUpdate: $options.forceUpdate\n  }, {\n    default: _withCtx(({\n      Component\n    }) => [(_openBlock(), _createBlock(_KeepAlive, {\n      include: \"Books\"\n    }, [(_openBlock(), _createBlock(_resolveDynamicComponent(Component)))], 1024 /* DYNAMIC_SLOTS */))]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"onSuccess\", \"onError\", \"onWarning\", \"onForceUpdate\"]))]), _createVNode(_component_Footer)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createVNode","_component_Header","_createElementVNode","_createBlock","_component_router_view","key","$data","componentKey","onSuccess","$options","success","onError","error","onWarning","warning","onForceUpdate","forceUpdate","default","_withCtx","Component","_KeepAlive","include","_resolveDynamicComponent","_","_component_Footer"],"sources":["/Users/ed1p_/MovieProject/frontend/src/App.vue"],"sourcesContent":["<template>\n  <Header />\n  <div>\n    <router-view v-slot=\"{ Component }\" :key=\"componentKey\" @success=\"success\" @error=\"error\" @warning=\"warning\" @forceUpdate=\"forceUpdate\">\n      <keep-alive include=\"Books\">\n        <component :is=\"Component\" />\n      </keep-alive>\n    </router-view>\n  </div>\n  <Footer />\n</template>\n\n<script>\nimport Header from \"./components/Header.vue\"\nimport Footer from \"./components/Footer.vue\"\nimport { store } from './components/store.js'\nimport notie from 'notie'\n\nconst getCookie = (name) => {\n  return document.cookie.split(\"; \").reduce((r, v) => {\n    const parts = v.split(\"=\");\n    return parts[0] === name ? decodeURIComponent(parts[1]) : r;\n  }, \"\");\n}\n\nexport default {\n  name: 'App',\n  components: {\n    Header,\n    Footer,\n  },\n  data() {\n    return {\n      store,\n      componentKey: 0,\n    }\n  },\n  beforeMount() {\n    // check for a cookie\n    let data = getCookie(\"_site_data\");\n\n    if (data !== \"\") {\n      let cookieData = JSON.parse(data);\n\n      // update store\n      store.token = cookieData.token.token;\n      store.user = {\n        id: cookieData.user.id,\n        first_name: cookieData.user.first_name,\n        last_name: cookieData.user.last_name,\n        email: cookieData.user.email,\n      }\n    }\n  },\n  methods: {\n    success(msg){\n      notie.alert({\n        type: 'success',\n        text: msg,\n      })\n    },\n    error(msg) {\n      notie.alert({\n        type: 'error',\n        text: msg,\n      })\n    },\n    warning(msg) {\n      notie.alert({\n        type: 'warning',\n        text: msg,\n      })\n    },\n    forceUpdate() {\n      this.componentKey += 1;\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>"],"mappings":";;;;;uBAAAA,mBAAA,CAAAC,SAAA,SACEC,YAAA,CAAUC,iBAAA,GACVC,mBAAA,CAMM,e,cALJC,YAAA,CAIcC,sBAAA;IAJuBC,GAAG,EAAEC,KAAA,CAAAC,YAAY;IAAGC,SAAO,EAAEC,QAAA,CAAAC,OAAO;IAAGC,OAAK,EAAEF,QAAA,CAAAG,KAAK;IAAGC,SAAO,EAAEJ,QAAA,CAAAK,OAAO;IAAGC,aAAW,EAAEN,QAAA,CAAAO;;IAH/HC,OAAA,EAAAC,QAAA,CAIM,CAEa;MAHQC;IAAS,Q,cAC9BhB,YAAA,CAEaiB,UAAA;MAFDC,OAAO,EAAC;IAAO,K,cACzBlB,YAAA,CAA6BmB,wBALrC,CAKwBH,SAAS,I;IALjCI,CAAA;gFASEvB,YAAA,CAAUwB,iBAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}